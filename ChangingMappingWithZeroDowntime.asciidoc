[[ChangingMappingWithZeroDowntime]]
== 不影响服务改变映射

原作者：Clinton Gormley Jun 17, 2013

译者：  殷春祥  July 14， 2014

PS：本文把mapping翻译成映射


一个我认识的开发人员给我发了一个推特说：
    _我使用Elasticsearch的最大问题是每次当我改变表的模式时我都要重新索引。有数据量很大会花很长的时间，
    并且期间不能提供服务。大部分应用都经常碰到这种情况。_

不停止服务区改变索引的映射是可行的，但是在tweet上说几种解决方法就太多了，所以有了这篇博文。

==== 问题-为什么你不能改变映射

你只能找到你存储在索引里的东西。为了使你的数据变得可以搜索，数据库需要知道每个字段包含的数据的类型，
以及它是如何索引的。如果你把一个数据类型比如 `string` 改成 `date`, 你索引的那个字段的所有数据就会变
成没用的。总之，你需要重新索引那个字段。

不只是Elasticsearch是这样，任何使用索引来搜索的数据库都是这样。如果不使用索引，那就因为灵活性而牺牲
了速度.

Elasticsearch(包括Lucene)把索引存储在不可变 _片段_ -- 每个片段是个 `"微型"` 倒排索引。这些分片从来不
适当更新。更新一个文档从来都是创建一个新文档让后标志老的文档为已删除。所以，你新加更多的文档(或者更新
已经存在的文档)，新的分片会被创建。后台运行的合并进程把几个小的分片合并成一个新的大的分片，然后老的分
片被彻底删除。

典型的，Elasticsearch里面的索引将包含各种类型的文档。每个 `_type` 拥有它自己的模式或 _映射_ 。1个分片
可能包含各种类型的文档。所以，如果你想在单个type里修改单个字段的定义，你除了重新给你的index的文档重新
建索引没有别的方法了。

==== 增加字段是自由的

一个分段只包含那些字段真正在文档里的index。这意味着你能是用 `put_mapping` API自由的添加字段。没有必要
重新建索引。

==== 给数据重新建索引

给数据重新建索引的过程非常简单。首先，创建一个有着新的映射和设置的索引。

[source,js]
------
curl -XPUT localhost:9200/new_index -d '
{
    "mappings": {
        "my_type": { ... new mapping definition ...}
    }
}
'
------

然后，把文档从旧的索引里拉出来，使用 _scrolled search_ 并且使用 `bulk` API把数据放到新的索引里。许多客
户端API提供了 `reindex()` 方法，这个方法帮你把重建数据索引的所有的事都做了。一旦完成，就的索引就可以删
除了。

*注意*：确保在你的搜索请求了里包含了 `search_type=scan` 。这个参数使排序失效，并且使得 `deep paging` 
高效。

这种方法的问题是索引的名字变了，这意味着你必须让你的应用去使用新的索引名字。

==== 不停服务重新索引数据

索引别名给了我们在后台运行重新索引的灵活性，使得这种变化对我们的应用完全透明。别名是一个符号链接，能够
指向1个或多个真正的索引。

典型的工作流程如下。首先，创建一个索引，附加一个版本或者时间戳到索引的名字：

[source,js]
------
curl -XPUT localhost:9200/my_index_v1 -d '
{ ... mappings ... }
'
------

创建一个指向这个索引的别名：

[source,js]
----
curl -XPOST localhost:9200/_aliases -d '
{
    "actions": [
        { "add": {
            "alias": "my_index",
            "index": "my_index_v1"
        }}
    ]
}
'
----

现在你的应用直接使用 `my_index` 就像它是一个真正的索引一样。

当你需要重新索引数据的，你创建一个新的索引，后缀添加一个版本号：

[source,js]
----
curl -XPUT localhost:9200/my_index_v2 -d '
{ ... mappings ... }
'
----

把数据从 `my_index_v1` 重新索引到 `my_index_v2` ，然后把别名 `my_index` 指向到新的索引，单个操作如下：

[source,js]
----
curl -XPOST localhost:9200/_aliases -d '
{
    "actions": [
        { "remove": {
            "alias": "my_index",
            "index": "my_index_v1"
        }},
        { "add": {
            "alias": "my_index",
            "index": "my_index_v2"
        }}
    ]
}
'
----

最后，删除老的索引

[source,js]
----
curl -XDELETE localhost:9200/my_index_v1
----



